// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using RemoteExamination.DAL.Context;

namespace RemoteExamination.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    internal class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(36)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(36)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(36)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(36)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.Answer", b =>
            {
                b.Property<int>("AnswerId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<bool>("IsCorrect")
                    .HasColumnType("bit");

                b.Property<int>("QuestionId")
                    .HasColumnType("int");

                b.Property<string>("Value")
                    .IsRequired()
                    .HasColumnType("nvarchar(200)")
                    .HasMaxLength(200);

                b.HasKey("AnswerId");

                b.HasIndex("QuestionId");

                b.ToTable("Answers");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.Exam", b =>
            {
                b.Property<int>("ExamId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ExamCreator")
                    .IsRequired()
                    .HasColumnType("nvarchar(36)")
                    .HasMaxLength(36);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.HasKey("ExamId");

                b.HasIndex("ExamCreator");

                b.ToTable("Exams");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.ExamResult", b =>
            {
                b.Property<int>("ExamResultId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("ExamId")
                    .HasColumnType("int");

                b.Property<string>("ExamName")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("ExamResultDate")
                    .HasColumnType("datetime2");

                b.Property<string>("ExamResultInPercent")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserEmail")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(36)");

                b.HasKey("ExamResultId");

                b.HasIndex("ExamId");

                b.HasIndex("UserId");

                b.ToTable("ExamResults");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.ExamResultAnswer", b =>
            {
                b.Property<int>("ExamResultAnswerId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("ExamResultQuestionId")
                    .HasColumnType("int");

                b.Property<bool>("IsCorrect")
                    .HasColumnType("bit");

                b.Property<bool>("IsTouched")
                    .HasColumnType("bit");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("ExamResultAnswerId");

                b.HasIndex("ExamResultQuestionId");

                b.ToTable("ExamResultAnswers");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.ExamResultQuestion", b =>
            {
                b.Property<int>("ExamResultQuestionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("ExamResultId")
                    .HasColumnType("int");

                b.Property<string>("Question")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("ExamResultQuestionId");

                b.HasIndex("ExamResultId");

                b.ToTable("ExamResultQuestions");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.Invitation", b =>
            {
                b.Property<int>("InvitationId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("ExamId")
                    .HasColumnType("int");

                b.Property<string>("InvitationCode")
                    .IsRequired()
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.HasKey("InvitationId");

                b.HasIndex("ExamId");

                b.ToTable("Invitations");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.Question", b =>
            {
                b.Property<int>("QuestionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("ExamId")
                    .HasColumnType("int");

                b.Property<string>("QuestionMessage")
                    .IsRequired()
                    .HasColumnType("nvarchar(300)")
                    .HasMaxLength(300);

                b.HasKey("QuestionId");

                b.HasIndex("ExamId");

                b.ToTable("Questions");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.User", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(36)")
                    .HasMaxLength(36);

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.UserInvitation", b =>
            {
                b.Property<int>("UserInvitationId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("InvitationId")
                    .HasColumnType("int");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(36)");

                b.HasKey("UserInvitationId");

                b.HasIndex("InvitationId");

                b.HasIndex("UserId");

                b.ToTable("UserInvitations");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("RemoteExamination.DAL.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.Answer", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.Question", "Question")
                    .WithMany("Answers")
                    .HasForeignKey("QuestionId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.Exam", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.User", "User")
                    .WithMany()
                    .HasForeignKey("ExamCreator")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.ExamResult", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.Exam", null)
                    .WithMany("ExamResults")
                    .HasForeignKey("ExamId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("RemoteExamination.DAL.Entities.User", null)
                    .WithMany("ExamResults")
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.ExamResultAnswer", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.ExamResultQuestion", null)
                    .WithMany("ExamResultAnswers")
                    .HasForeignKey("ExamResultQuestionId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.ExamResultQuestion", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.ExamResult", null)
                    .WithMany("ExamResultQuestions")
                    .HasForeignKey("ExamResultId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.Invitation", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.Exam", "Exam")
                    .WithMany("Invitations")
                    .HasForeignKey("ExamId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.Question", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.Exam", "Exam")
                    .WithMany("Questions")
                    .HasForeignKey("ExamId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("RemoteExamination.DAL.Entities.UserInvitation", b =>
            {
                b.HasOne("RemoteExamination.DAL.Entities.Invitation", "Invitation")
                    .WithMany("UserInvitations")
                    .HasForeignKey("InvitationId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("RemoteExamination.DAL.Entities.User", "User")
                    .WithMany("UserInvitations")
                    .HasForeignKey("UserId");
            });
#pragma warning restore 612, 618
        }
    }
}